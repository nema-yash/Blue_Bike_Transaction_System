SET SERVEROUTPUT ON;
create or replace PROCEDURE TICKET_CREATION(EMAIL IN CUSTOMER.EMAIL_ID%TYPE, T_TYPE IN TICKETING_QUEUE.TICKET_DESC%TYPE) AS 
EX_EMAIL_NULL EXCEPTION;
USER_DOESNT_EXIST_EXCEP EXCEPTION;
T_TYPE_ISSUE EXCEPTION;
CUSTOMER_CARE_EXCEP EXCEPTION;
VAL NUMBER;
E_ID CUSTOMER_TECHNICIAN_STATE.EMPLOYEE_ID%TYPE;
TIC_ID TICKETING_QUEUE.TICKET_ID%TYPE;

BEGIN
    EXECUTE IMMEDIATE ('SELECT COUNT(*) from (SELECT 1 from dual where REGEXP_LIKE ('''||EMAIL||''', ''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$''))') INTO VAL;

    IF LENGTH(UPPER(EMAIL)) IS NULL OR VAL<1 THEN
        RAISE EX_EMAIL_NULL;
    END IF;

    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER WHERE UPPER(EMAIL_ID)=UPPER('''||EMAIL||''')') INTO VAL;

    IF VAL<1 THEN
        RAISE USER_DOESNT_EXIST_EXCEP;
    END IF;
    
    
    IF LENGTH(UPPER(T_TYPE)) IS NULL OR(UPPER(T_TYPE)!='REGISTRATION ISSUE' AND 
                                        UPPER(T_TYPE)!='WALLET SETUP' AND 
                                        UPPER(T_TYPE)!='PAYMENT DEDUCTION ISSUE' AND 
                                        UPPER(T_TYPE)!='BOOKING ISSUE' AND 
                                        UPPER(T_TYPE)!='COUPON ISSUE' AND 
                                        UPPER(T_TYPE)!='DISCOUNT USAGE ISSUE' AND 
                                        UPPER(T_TYPE)!='BIKE AVAILABILITY ISSUE' AND 
                                        UPPER(T_TYPE)!='BIKE CONDITION ISSUE' AND 
                                        UPPER(T_TYPE)!='MEMBERSHIP RENEWAL ISSUES' AND 
                                        UPPER(T_TYPE)!='OTHER ISSUES')THEN
        RAISE T_TYPE_ISSUE;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER_TECHNICIAN_STATE WHERE CUSTOMER_TECHNICIAN_STATUS=''AVAILABLE''') INTO VAL;

    IF VAL<1 THEN
        RAISE CUSTOMER_CARE_EXCEP;
    END IF;    
    
    SELECT EMPLOYEE_ID INTO E_ID FROM CUSTOMER_TECHNICIAN_STATE WHERE EMPLOYEE_ID=(SELECT MIN(EMPLOYEE_ID) FROM CUSTOMER_TECHNICIAN_STATE WHERE CUSTOMER_TECHNICIAN_STATUS='AVAILABLE');
    
    UPDATE CUSTOMER_TECHNICIAN_STATE SET CUSTOMER_TECHNICIAN_STATUS='UNAVAILABLE' WHERE EMPLOYEE_ID=E_ID;
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM TICKETING_QUEUE') INTO VAL;
    IF VAL=0 THEN
        TIC_ID:=100000000;
    ELSIF VAL>0 THEN
        SELECT TICKET_ID INTO TIC_ID FROM TICKETING_QUEUE WHERE TICKET_ID=(SELECT MAX(TICKET_ID) FROM TICKETING_QUEUE);
        TIC_ID:=TIC_ID+1;
    END IF;  
    
    
    INSERT INTO TICKETING_QUEUE VALUES (TIC_ID,(SELECT CUSTOMER_ID FROM CUSTOMER WHERE UPPER(EMAIL_ID)=UPPER(EMAIL)),E_ID,T_TYPE,'ASSIGNED');
    
    DBMS_OUTPUT.PUT_LINE('TICKET ASSIGNED');
    COMMIT;

EXCEPTION
    WHEN EX_EMAIL_NULL THEN
        DBMS_OUTPUT.PUT_LINE('EMAIL ID FORMAT IS INCORRECT, TRY AGAIN');
     when USER_DOESNT_EXIST_EXCEP then
            dbms_output.put_line('CUSTOMER DOES NOT EXIST, REGISTER FIRST');
    WHEN T_TYPE_ISSUE THEN
        DBMS_OUTPUT.PUT_LINE('PRINT ISSUE OPTIONS AGAIN AND ENTER THE CORRECT TICKET TYPE DESCRIPTION');
    WHEN CUSTOMER_CARE_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('CUSTOMER TECHNICIAN NOT AVAILABLE, TRY AGAIN SOON');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    ROLLBACK;
END;

select * from membership;
select * from customer;



create or replace PROCEDURE ADD_DISCOUNT(C_NAME IN DISCOUNT.COUPON_NAME%TYPE, C_VALUE IN DISCOUNT.COUPON_VALUE%TYPE) IS
    V_COUNTER NUMBER := 0;
    C_AMOUNT NUMBER;
    CURRENT_USER VARCHAR(10);
    EX_INCORRECT_USER EXCEPTION;
    EX_NO_TABLE EXCEPTION;
    EX_C_NAME_EXISTS EXCEPTION;
    EX_C_NAME_NULL EXCEPTION;
    EX_AMOUNT_NEGATIVE EXCEPTION;
    EX_AMOUNT_NULL EXCEPTION;
BEGIN
    SELECT USER INTO CURRENT_USER FROM DUAL;
    IF (CURRENT_USER <> 'NAGPALM') THEN
        RAISE EX_INCORRECT_USER;
    END IF;

    SELECT COUNT(*) INTO V_COUNTER FROM ALL_TABLES WHERE TABLE_NAME = 'DISCOUNT' AND TABLESPACE_NAME = 'DATA';
    IF V_COUNTER = 0 THEN
        RAISE EX_NO_TABLE;
    END IF;

    IF C_NAME IS NULL THEN
        RAISE EX_C_NAME_NULL;
    END IF;

    IF C_VALUE IS NULL THEN
        RAISE EX_AMOUNT_NULL;
    END IF;

    SELECT COUNT(*) INTO V_COUNTER FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
    IF V_COUNTER > 0 THEN
        SELECT COUPON_VALUE INTO C_AMOUNT FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
        IF C_AMOUNT = C_VALUE THEN
            RAISE EX_C_NAME_EXISTS;
        ELSE
            UPDATE DISCOUNT SET COUPON_VALUE = C_VALUE WHERE COUPON_NAME = C_NAME;
            SELECT COUPON_VALUE INTO C_AMOUNT FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
            DBMS_OUTPUT.PUT_LINE('COUPON UPDATED: ' || C_NAME || ' UPDATED VALUE: ' || C_AMOUNT);
        END IF;
    ELSE
        INSERT INTO DISCOUNT VALUES(((SELECT MAX(COUPON_ID) FROM DISCOUNT) + 1),C_NAME,C_VALUE,'ACTIVE');
        SELECT COUPON_VALUE INTO C_AMOUNT FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
        DBMS_OUTPUT.PUT_LINE('COUPON ADDED: ' || C_NAME || ' VALUE: ' || C_AMOUNT);
    END IF;

    COMMIT;
EXCEPTION
    WHEN EX_INCORRECT_USER THEN
        DBMS_OUTPUT.PUT_LINE('YOU CANNOT DO THIS ACTION. PLEASE CONTACT ADMIN');
    WHEN EX_NO_TABLE THEN
        DBMS_OUTPUT.PUT_LINE('TABLE DOES NOT EXIST. PLEAE CONTACT ADMIN');
    WHEN EX_C_NAME_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('COUPON NAME ALREADY EXIST');
    WHEN EX_AMOUNT_NULL THEN
        DBMS_OUTPUT.PUT_LINE('COUPON VALUE CANNOT BE EMPTY OR NULL');
    WHEN EX_C_NAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('COUPON VALUE CANNOT BE EMPTY OR NULL');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    ROLLBACK;
END;




create or replace PROCEDURE CUSTOMER_REGISTRATION(F_NAME IN CUSTOMER.FIRST_NAME%TYPE,L_NAME IN CUSTOMER.LAST_NAME%TYPE, MOB_NO IN CUSTOMER.MOBILE_NUMBER%TYPE, EMAIL IN CUSTOMER.EMAIL_ID%TYPE) AS
    C_ID CUSTOMER.CUSTOMER_ID%TYPE;
    VAL CUSTOMER.CUSTOMER_ID%TYPE;
    VAL1 NUMBER;
    W_ID WALLET.WALLET_ID%TYPE;
    EX_FNAME_NULL EXCEPTION;
    EX_LNAME_NULL EXCEPTION;
    USER_EXISTS_EXCEP EXCEPTION;
    MOB_NO_FORMAT EXCEPTION;
    EMAIL_ISSUE EXCEPTION;
BEGIN
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER') INTO VAL;
    IF VAL=0 THEN
        C_ID:=10000;

    ELSIF VAL>0 THEN
        SELECT CUSTOMER_ID INTO C_ID FROM CUSTOMER WHERE CUSTOMER_ID=(SELECT MAX(CUSTOMER_ID) FROM CUSTOMER);
        C_ID:=C_ID+1;
    END IF;

    IF LENGTH(UPPER(F_NAME)) IS NULL THEN
        RAISE EX_FNAME_NULL;
    END IF;

    IF LENGTH(UPPER(L_NAME)) IS NULL THEN
        RAISE EX_LNAME_NULL;
    END IF;

    IF MOB_NO < 1000000000 OR MOB_NO>9999999999 THEN
        RAISE MOB_NO_FORMAT;
    END IF;

    EXECUTE IMMEDIATE ('SELECT COUNT(*) from (SELECT 1 from dual where REGEXP_LIKE ('''||EMAIL||''', ''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$''))') INTO VAL1;

    IF LENGTH(UPPER(EMAIL)) IS NULL OR VAL1<1 THEN
        RAISE EMAIL_ISSUE;
    END IF;

    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER WHERE UPPER(EMAIL_ID)=UPPER('''||EMAIL||''')') INTO VAL1;

    IF VAL1>0 THEN
        RAISE USER_EXISTS_EXCEP;
    END IF;

    WALLET_REGISTRATION(W_ID);

    --DBMS_OUTPUT.PUT_LINE('INSERT INTO WALLET VALUES ('||W_ID||',0)');
    --DBMS_OUTPUT.PUT_LINE('INSERT INTO CUSTOMER VALUES ('||C_ID||','''||F_NAME||''','''||L_NAME||''','||MOB_NO||','''||EMAIL||''',0,'||W_ID||')');
    EXECUTE IMMEDIATE('INSERT INTO WALLET VALUES ('||W_ID||',0)');
    EXECUTE IMMEDIATE('INSERT INTO CUSTOMER VALUES ('||C_ID||','''||F_NAME||''','''||L_NAME||''','||MOB_NO||','''||EMAIL||''',NULL,NULL,'||W_ID||')');
    --INSERT INTO CUSTOMER VALUES (C_ID,F_NAME,L_NAME,MOB_NO,EMAIL,0,W_ID);

    COMMIT;

    EXCEPTION
    WHEN EX_FNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('FIRST NAME CANNOT BE EMPTY');
    WHEN EX_LNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('LAST NAME CANNOT BE EMPTY');
    WHEN USER_EXISTS_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('USER ALREADY EXISTS, CANNOT BE REGISTERED AS NEW USER');
    WHEN MOB_NO_FORMAT THEN
        DBMS_OUTPUT.PUT_LINE('MOBILE NUMBER CANNOT BE NEGATIVE OR GREATER THAN 10 DIGITS');
    WHEN EMAIL_ISSUE THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER EMAIL IN VALID FORMAT');
   -- WHEN OTHERS THEN
     --   DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS');
    ROLLBACK;
END;

EXECUTE CUSTOMER_REGISTRATION('YASH','NEMA',8450997531,'YASH.NEMA@GMAIL.COM');


create or replace PROCEDURE CUSTOMER_REGISTRATION(F_NAME IN CUSTOMER.FIRST_NAME%TYPE,L_NAME IN CUSTOMER.LAST_NAME%TYPE, MOB_NO IN CUSTOMER.MOBILE_NUMBER%TYPE, EMAIL IN CUSTOMER.EMAIL_ID%TYPE) AS
    C_ID CUSTOMER.CUSTOMER_ID%TYPE;
    VAL CUSTOMER.CUSTOMER_ID%TYPE;
    VAL1 NUMBER;
    W_ID WALLET.WALLET_ID%TYPE;
    EX_FNAME_NULL EXCEPTION;
    EX_LNAME_NULL EXCEPTION;
    USER_EXISTS_EXCEP EXCEPTION;
    MOB_NO_FORMAT EXCEPTION;
    EMAIL_ISSUE EXCEPTION;
BEGIN
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER') INTO VAL;
    IF VAL=0 THEN
        C_ID:=10000;

    ELSIF VAL>0 THEN
        SELECT CUSTOMER_ID INTO C_ID FROM CUSTOMER WHERE CUSTOMER_ID=(SELECT MAX(CUSTOMER_ID) FROM CUSTOMER);
        C_ID:=C_ID+1;
    END IF;

    IF LENGTH(UPPER(F_NAME)) IS NULL THEN
        RAISE EX_FNAME_NULL;
    END IF;

    IF LENGTH(UPPER(L_NAME)) IS NULL THEN
        RAISE EX_LNAME_NULL;
    END IF;

    IF MOB_NO < 1000000000 OR MOB_NO>9999999999 THEN
        RAISE MOB_NO_FORMAT;
    END IF;

    EXECUTE IMMEDIATE ('SELECT COUNT(*) from (SELECT 1 from dual where REGEXP_LIKE ('''||EMAIL||''', ''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$''))') INTO VAL1;

    IF LENGTH(UPPER(EMAIL)) IS NULL OR VAL1<1 THEN
        RAISE EMAIL_ISSUE;
    END IF;

    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER WHERE UPPER(EMAIL_ID)=UPPER('''||EMAIL||''')') INTO VAL1;

    IF VAL1>0 THEN
        RAISE USER_EXISTS_EXCEP;
    END IF;

    WALLET_REGISTRATION(W_ID);

    --DBMS_OUTPUT.PUT_LINE('INSERT INTO WALLET VALUES ('||W_ID||',0)');
    --DBMS_OUTPUT.PUT_LINE('INSERT INTO CUSTOMER VALUES ('||C_ID||','''||F_NAME||''','''||L_NAME||''','||MOB_NO||','''||EMAIL||''',0,'||W_ID||')');
    EXECUTE IMMEDIATE('INSERT INTO WALLET VALUES ('||W_ID||',0)');
    EXECUTE IMMEDIATE('INSERT INTO CUSTOMER VALUES ('||C_ID||','''||F_NAME||''','''||L_NAME||''','||MOB_NO||','''||EMAIL||''',NULL,NULL,'||W_ID||')');
    --INSERT INTO CUSTOMER VALUES (C_ID,F_NAME,L_NAME,MOB_NO,EMAIL,0,W_ID);

    COMMIT;

    EXCEPTION
    WHEN EX_FNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('FIRST NAME CANNOT BE EMPTY');
    WHEN EX_LNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('LAST NAME CANNOT BE EMPTY');
    WHEN USER_EXISTS_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('USER ALREADY EXISTS, CANNOT BE REGISTERED AS NEW USER');
    WHEN MOB_NO_FORMAT THEN
        DBMS_OUTPUT.PUT_LINE('MOBILE NUMBER CANNOT BE NEGATIVE OR GREATER THAN 10 DIGITS');
    WHEN EMAIL_ISSUE THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER EMAIL IN VALID FORMAT');
   -- WHEN OTHERS THEN
     --   DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS');
    ROLLBACK;
END;

sELECT * FROM MEMBERSHIP;

SELECT * FROM CUSTOMER;

SELECT * FROM WALLET;


DIANE.EVANS@YAHOO.COM ;

create or replace PROCEDURE MEMBERSHIP_REGISTER_CHOICE(EMAIL IN CUSTOMER.EMAIL_ID%TYPE,MEM_ID IN MEMBERSHIP.MEMBERSHIP_ID%TYPE) AS
    BAL WALLET.BALANCE%TYPE;
    VAL NUMBER;
    VAL1 MEMBERSHIP.MEMBERSHIP_AMOUNT%TYPE;
    W_ID WALLET.WALLET_ID%TYPE;
    MEM_OPTION_INCORRECT EXCEPTION;
    USER_DOESNT_EXIST_EXCEP EXCEPTION;
    EMAIL_ISSUE EXCEPTION;
    INSUFF_BAL EXCEPTION;
    MEM_ALREADY_EXIST EXCEPTION;
    MEM_END_DATE DATE;
BEGIN
    EXECUTE IMMEDIATE ('SELECT COUNT(*) from (SELECT 1 from dual where REGEXP_LIKE ('''||EMAIL||''', ''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$''))') INTO VAL;

    IF LENGTH(UPPER(EMAIL)) IS NULL OR VAL<1 THEN
        RAISE EMAIL_ISSUE;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER WHERE UPPER(EMAIL_ID)=UPPER('''||EMAIL||''')') INTO VAL;

    IF VAL<1 THEN
        RAISE USER_DOESNT_EXIST_EXCEP;
    END IF;

    EXECUTE IMMEDIATE ('SELECT MEMBERSHIP_ID FROM CUSTOMER WHERE UPPER(EMAIL_ID)=UPPER('''||EMAIL||''')') INTO VAL;

    IF VAL=1 OR VAL=2 OR VAL=3 THEN
        RAISE MEM_ALREADY_EXIST;
    END IF;

    
    IF MEM_ID IS NULL OR (MEM_ID!=1 AND MEM_ID!=2 AND MEM_ID!=3) THEN
        RAISE MEM_OPTION_INCORRECT;
    END IF;
    
    
    EXECUTE IMMEDIATE ('SELECT WALLET_ID FROM CUSTOMER WHERE EMAIL_ID='''||EMAIL||'''') INTO W_ID;

    EXECUTE IMMEDIATE ('SELECT BALANCE FROM WALLET WHERE WALLET_ID='||W_ID) INTO BAL;
    
    EXECUTE IMMEDIATE ('SELECT MEMBERSHIP_AMOUNT FROM MEMBERSHIP WHERE MEMBERSHIP_ID='||MEM_ID) INTO VAL1;
    
    --DBMS_OUTPUT.PUT_LINE ('SELECT MEMBERSHIP_AMOUNT FROM MEMBERSHIP WHERE MEMBERSHIP_ID='||MEM_ID);

    IF BAL-VAL1<0 THEN
        RAISE INSUFF_BAL;
    END IF;

    BAL:=BAL-VAL1;

    EXECUTE IMMEDIATE ('UPDATE CUSTOMER SET MEMBERSHIP_ID=' ||MEM_ID|| ' WHERE WALLET_ID = '||W_ID);

    EXECUTE IMMEDIATE ('UPDATE WALLET SET BALANCE=' ||BAL|| ' WHERE WALLET_ID = '||W_ID);

    IF MEM_ID=1 THEN
        SELECT (SYSDATE +7) INTO MEM_END_DATE FROM DUAL;
        EXECUTE IMMEDIATE ('UPDATE CUSTOMER SET MEMBERSHIP_END_DATE='''||MEM_END_DATE||''' WHERE WALLET_ID = '||W_ID);
    ELSIF MEM_ID=2 THEN
        SELECT (SYSDATE +30) INTO MEM_END_DATE FROM DUAL;
        EXECUTE IMMEDIATE ('UPDATE CUSTOMER SET MEMBERSHIP_END_DATE='''||MEM_END_DATE||''' WHERE WALLET_ID = '||W_ID);
    ELSIF MEM_ID=3 THEN
        SELECT (SYSDATE +365) INTO MEM_END_DATE FROM DUAL;
        EXECUTE IMMEDIATE ('UPDATE CUSTOMER SET MEMBERSHIP_END_DATE='''||MEM_END_DATE||''' WHERE WALLET_ID = '||W_ID);
    ELSE
        RAISE MEM_OPTION_INCORRECT;
    END IF;
    

    COMMIT;

    EXCEPTION
    WHEN USER_DOESNT_EXIST_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('USER DOES NOT EXIST, REGISTER FIRST AS NEW USER');
    WHEN EMAIL_ISSUE THEN
        DBMS_OUTPUT.PUT_LINE('EMAIL FORMAT INCORRECT, TRY AGAIN');
    WHEN MEM_OPTION_INCORRECT THEN
        DBMS_OUTPUT.PUT_LINE('MEMBERSHIP OPTION NOT AVAILABLE CHOOSE EITHER 1 OR 2  OR 3');
    WHEN INSUFF_BAL THEN
        DBMS_OUTPUT.PUT_LINE('ADD ATLEAST '||VAL1||' TO CHOOSE '||MEM_ID||' MEMBERSHIP OPTION');
    WHEN MEM_ALREADY_EXIST THEN
        DBMS_OUTPUT.PUT_LINE('ALREADY IN MEMBERSHIP PERIOD, BOOK NEW MEMBERSHIP AT THE END OF CURRENT MEMBERSHIP PERIOD');
    --WHEN OTHERS THEN
     --   DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS');        
    ROLLBACK;

END;

SET SERVEROUTPUT ON;
EXECUTE MEMBERSHIP_REGISTER_CHOICE('YASH.NEMA@GMAIL.COM',1);

EXECUTE ADD_BALANCE('YASH.NEMA@GMAIL.COM',45);