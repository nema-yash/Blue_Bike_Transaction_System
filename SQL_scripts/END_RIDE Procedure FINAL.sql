create or replace PROCEDURE END_RIDE(EMAIL IN CUSTOMER.EMAIL_ID%TYPE, D_ID IN BIKE.DOCK_ID%TYPE,C_NAME IN DISCOUNT.COUPON_NAME%TYPE default null) AS
    END_TIME DATE := CURRENT_DATE;
    START_TIME DATE;
    CUST_ID CUSTOMER.CUSTOMER_ID%TYPE;
    DISCOUNT_AMT DISCOUNT.COUPON_VALUE%TYPE := 0;
    TOTAL_TIME NUMBER := 0;
    MEM_ID MEMBERSHIP.MEMBERSHIP_ID%TYPE := 0;
    WAL_ID CUSTOMER.WALLET_ID%TYPE;
    BAL WALLET.BALANCE%TYPE := 0;
    B_ID BIKE.BIKE_ID%TYPE;
    GRAND_TOTAL NUMBER := 0;
    R_ID RENT.RENT_ID%TYPE;
    C_ID DISCOUNT.COUPON_ID%TYPE;
    DOC_ID_CHECK NUMBER;
    D_ID_WRONG EXCEPTION;
    EMAIL_NULL EXCEPTION;
    D_ID_NULL EXCEPTION;
    EMAIL_WRONG EXCEPTION;
    NO_RIDE EXCEPTION;
    NO_COUPON EXCEPTION;
    EXPIRED_COUPON EXCEPTION;
BEGIN

    IF D_ID IS NULL THEN
        RAISE D_ID_NULL;
    END IF;

    IF EMAIL IS NULL THEN
        RAISE EMAIL_NULL;
    END IF;
    
    BEGIN
        SELECT CUSTOMER_ID INTO CUST_ID FROM CUSTOMER WHERE EMAIL_ID = UPPER(EMAIL);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE EMAIL_WRONG;
    END;

        BEGIN
            SELECT RENT_ID INTO R_ID FROM RENT WHERE DROP_TIME IS NULL AND PAYMENT_STATUS IS NULL AND CUSTOMER_ID = CUST_ID;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE NO_RIDE;
        END;

        BEGIN
            SELECT MEMBERSHIP_ID INTO MEM_ID FROM CUSTOMER WHERE CUSTOMER_ID = CUST_ID AND MEMBERSHIP_END_DATE > CURRENT_DATE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                MEM_ID := 0;
        END;

        IF C_NAME IS NOT NULL THEN
            BEGIN
                SELECT COUPON_ID INTO C_ID FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RAISE NO_COUPON;
            END;
        END IF;

        IF C_NAME IS NOT NULL THEN        
            BEGIN
                SELECT COUPON_VALUE INTO DISCOUNT_AMT FROM DISCOUNT WHERE COUPON_NAME = C_NAME AND COUPON_STATUS = 'ACTIVE';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    RAISE EXPIRED_COUPON;
            END;

        END IF;

        SELECT COUNT(*) INTO DOC_ID_CHECK FROM DOCK WHERE DOCK_ID = D_ID;
        IF DOC_ID_CHECK = 0 THEN
            RAISE D_ID_WRONG;
        END IF;
        SELECT BIKE_ID INTO B_ID FROM RENT WHERE RENT_ID = R_ID;
        SELECT PICKUP_TIME INTO START_TIME FROM RENT WHERE RENT_ID = R_ID;
        SELECT (END_TIME - START_TIME)* 24 * 60 difference_in_minutes INTO TOTAL_TIME FROM DUAL;
        IF MEM_ID = 1 THEN
            GRAND_TOTAL := (TOTAL_TIME * 10)/60 - (10/6000)*(TOTAL_TIME * 10);
        ELSIF MEM_ID = 2 THEN
            GRAND_TOTAL := (TOTAL_TIME * 10)/60 - (20/6000)*(TOTAL_TIME * 10);
        ELSIF MEM_ID = 3 THEN
            GRAND_TOTAL := (TOTAL_TIME * 10)/60 - (30/6000)*(TOTAL_TIME * 10);
        ELSE
            GRAND_TOTAL := (TOTAL_TIME * 10)/60;
        END IF;

        GRAND_TOTAL := GRAND_TOTAL - (DISCOUNT_AMT/100)*GRAND_TOTAL;

        SELECT WALLET_ID INTO WAL_ID FROM CUSTOMER WHERE CUSTOMER_ID = CUST_ID;
        BAL := WALLET_BALANCE(WAL_ID);

        IF BAL > GRAND_TOTAL THEN
            UPDATE WALLET SET BALANCE = BALANCE - GRAND_TOTAL WHERE WALLET_ID = WAL_ID;
            UPDATE RENT SET PAYMENT_STATUS = 'PAID' WHERE RENT_ID = R_ID;
            UPDATE BIKE SET BIKE_STATUS = 'AVAILABLE' WHERE BIKE_ID = B_ID;
            UPDATE BIKE SET DOCK_ID = D_ID WHERE BIKE_ID = B_ID;
            UPDATE RENT SET COUPON_ID = C_ID WHERE RENT_ID = R_ID;
            UPDATE RENT SET DROP_TIME = END_TIME WHERE RENT_ID = R_ID;
            DBMS_OUTPUT.PUT_LINE('YOU HAVE ENDED YOUR RIDE SUCCESSFULLY');
        ELSE
            UPDATE BIKE SET BIKE_STATUS = 'AVAILABLE' WHERE BIKE_ID = B_ID;
            UPDATE BIKE SET DOCK_ID = D_ID WHERE BIKE_ID = B_ID;
            UPDATE RENT SET PAYMENT_STATUS = 'UNPAID' WHERE RENT_ID = R_ID;
            UPDATE RENT SET COUPON_ID = C_ID WHERE RENT_ID = R_ID;
            UPDATE RENT SET DROP_TIME = END_TIME WHERE RENT_ID = R_ID;
            DBMS_OUTPUT.PUT_LINE('INSUFFICIENT BALANCE IN YOUR WALLET. REFILL YOUR WALLET');
            DBMS_OUTPUT.PUT_LINE('TO ADD BALANCE EXECUTE ADD_BALANCE(''EMAIL_ID'',  NEW_BAL )');
        END IF;

        COMMIT;

    EXCEPTION 
        WHEN D_ID_NULL THEN
            DBMS_OUTPUT.PUT_LINE('DOCK ID CANNOT BE NULL');
        WHEN EMAIL_NULL THEN
            DBMS_OUTPUT.PUT_LINE('EMAIL ID CANNOT BE NULL');
        WHEN D_ID_WRONG THEN
            DBMS_OUTPUT.PUT_LINE('ENTERED DOCK ID IS INCORRECT');
        WHEN EMAIL_WRONG THEN
            DBMS_OUTPUT.PUT_LINE('EMAIL IS WRONG');
        WHEN NO_RIDE THEN
            DBMS_OUTPUT.PUT_LINE('NO RIDE TO END');
        WHEN NO_COUPON THEN   
            DBMS_OUTPUT.PUT_LINE('COUPON NAME DOES NOT EXIST');
        WHEN EXPIRED_COUPON THEN 
            DBMS_OUTPUT.PUT_LINE('COUPON HAS EXPIRED');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);    

    ROLLBACK;

END;
