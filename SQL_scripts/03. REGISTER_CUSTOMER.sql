
CREATE OR REPLACE PROCEDURE WALLET_REGISTRATION(W_ID OUT WALLET.WALLET_ID%TYPE) AS
    VAL NUMBER;
BEGIN
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM WALLET') INTO VAL;
    IF VAL=0 THEN
        W_ID:=1;
    ELSIF VAL>0 THEN
        SELECT WALLET_ID INTO W_ID FROM WALLET WHERE WALLET_ID=(SELECT MAX(WALLET_ID) FROM WALLET);
        W_ID:=W_ID+1;
    END IF;
END;
/


CREATE OR REPLACE PROCEDURE PRINT_MEMBERSHIP_OPTIONS IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(' ');
  FOR i in (SELECT * FROM MEMBERSHIP ORDER BY MEMBERSHIP_ID) LOOP
    dbms_output.put_line('     ' || i.MEMBERSHIP_ID || ' ' || i.MEMBERSHIP_TYPE || ' ' || i.AMOUNT);
  END LOOP; 
  DBMS_OUTPUT.PUT_LINE(' ');
END;
/

    
CREATE OR REPLACE PROCEDURE MEMBERSHIP_REGISTER_CHOICE(F_NAME IN CUSTOMER.FIRST_NAME%TYPE,L_NAME IN CUSTOMER.LAST_NAME%TYPE,MEM_ID IN MEMBERSHIP.MEMBERSHIP_ID%TYPE) AS
    BAL MEMBERSHIP.AMOUNT%TYPE;
    VAL NUMBER;
    VAL1 MEMBERSHIP.MEMBERSHIP_ID%TYPE;
    MEM_OPTION_INCORRECT EXCEPTION;
    EX_FNAME_NULL EXCEPTION;
    EX_LNAME_NULL EXCEPTION;
    USER_EXISTS_EXCEP EXCEPTION;
    W_ID WALLET.WALLET_ID%TYPE;
    INSUFF_BAL EXCEPTION;
BEGIN
    IF LENGTH(LOWER(F_NAME)) IS NULL THEN
        RAISE EX_FNAME_NULL;
    END IF;
    
    IF LENGTH(LOWER(L_NAME)) IS NULL THEN
        RAISE EX_LNAME_NULL;
    END IF;
    
    IF MEM_ID IS NULL OR (MEM_ID!=1 AND MEM_ID!=2 AND MEM_ID!=3) THEN
        RAISE MEM_OPTION_INCORRECT;
    END IF;
    
    --CURRENT_BALANCE(F_NAME,L_NAME, O_BALANCE);
    EXECUTE IMMEDIATE ('SELECT WALLET_ID FROM CUSTOMER WHERE FIRST_NAME='''||F_NAME||''' AND LAST_NAME='''||L_NAME||'''') INTO W_ID;
    EXECUTE IMMEDIATE ('SELECT BALANCE FROM WALLET WHERE WALLET_ID='||W_ID) INTO BAL;
    
    --EXECUTE IMMEDIATE ('SELECT AMOUNT FROM MEMBERSHIP WHERE MEMBERSHIP_ID='||MEM_ID) INTO VAL1;
    DBMS_OUTPUT.PUT_LINE ('SELECT AMOUNT FROM MEMBERSHIP WHERE MEMBERSHIP_ID='||MEM_ID);
    
    --IF BAL-VAL1<0 THEN
    --    RAISE INSUFF_BAL;
    --END IF;
    
--    BAL:=BAL-VAL1;
    
  --  EXECUTE IMMEDIATE ('UPDATE CUSTOMER SET MEMBERSHIP_ID=' ||MEM_ID|| ' WHERE WALLET_ID = '||W_ID);
    
    --EXECUTE IMMEDIATE ('UPDATE WALLET SET BALANCE=' ||BAL|| ' WHERE WALLET_ID = '||W_ID);
    --DBMS_OUTPUT.PUT_LINE('BALANCE FOR '||F_NAME||' '||L_NAME||' IS '||BAL);

    --COMMIT;
    
    EXCEPTION
    WHEN EX_FNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('FIRST NAME CANNOT BE EMPTY');
    WHEN EX_LNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('LAST NAME CANNOT BE EMPTY');
    WHEN USER_EXISTS_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('USER ALREADY EXISTS, CANNOT BE REGISTERED AS NEW USER');
    WHEN MEM_OPTION_INCORRECT THEN
        DBMS_OUTPUT.PUT_LINE('MEMBERSHIP OPTION NOT AVAILABLE CHOOSE EITHER 1 OR 2  OR 3');
    WHEN INSUFF_BAL THEN
        DBMS_OUTPUT.PUT_LINE('ADD ATLEAST '||VAL1||' TO CHOOSE '||MEM_ID||' MEMBERSHIP OPTION');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS');        
    ROLLBACK;
    
END;
/

CREATE OR REPLACE PROCEDURE CURRENT_BALANCE(F_NAME IN CUSTOMER.FIRST_NAME%TYPE,L_NAME IN CUSTOMER.LAST_NAME%TYPE, O_BAL OUT WALLET.BALANCE%TYPE) AS
    VAL NUMBER;
    W_ID WALLET.WALLET_ID%TYPE;
    BAL WALLET.BALANCE%TYPE;
    DOES_NOT_EXIST EXCEPTION;
    EX_FNAME_NULL EXCEPTION;
    EX_LNAME_NULL EXCEPTION;
    USER_EXISTS_EXCEP EXCEPTION;
    
BEGIN
    IF LENGTH(LOWER(F_NAME)) IS NULL THEN
        RAISE EX_FNAME_NULL;
    END IF;
    
    IF LENGTH(LOWER(L_NAME)) IS NULL THEN
        RAISE EX_LNAME_NULL;
    END IF;
    
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER WHERE UPPER(FIRST_NAME)=UPPER('''||F_NAME||''') AND UPPER(LAST_NAME)=UPPER('''||L_NAME||''')') INTO VAL;
    
    IF VAL>0 THEN
        RAISE USER_EXISTS_EXCEP;
    END IF;

    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM (SELECT WALLET_ID FROM CUSTOMER WHERE FIRST_NAME='''||F_NAME||''' AND LAST_NAME='''||L_NAME||''')') INTO VAL;
    IF VAL=0 THEN
        RAISE DOES_NOT_EXIST;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT WALLET_ID FROM CUSTOMER WHERE FIRST_NAME='''||F_NAME||''' AND LAST_NAME='''||L_NAME||'''') INTO W_ID;
    EXECUTE IMMEDIATE ('SELECT BALANCE FROM WALLET WHERE WALLET_ID='||W_ID) INTO BAL;
    
    DBMS_OUTPUT.PUT_LINE('BALANCE FOR '||F_NAME||' '||L_NAME||' IS '||BAL);
    O_BAL:=BAL;
    COMMIT;
    
    EXCEPTION
    WHEN EX_FNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('FIRST NAME CANNOT BE EMPTY');
    WHEN EX_LNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('LAST NAME CANNOT BE EMPTY');
    WHEN USER_EXISTS_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('USER ALREADY EXISTS, CANNOT BE REGISTERED AS NEW USER');
    WHEN DOES_NOT_EXIST THEN
        DBMS_OUTPUT.PUT_LINE('REGISTER CUSTOMER IN DATABSE');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS');    
    ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE ADD_BALANCE(F_NAME IN CUSTOMER.FIRST_NAME%TYPE,L_NAME IN CUSTOMER.LAST_NAME%TYPE, NEW_BAL IN WALLET.BALANCE%TYPE) AS
    VAL NUMBER;
    W_ID WALLET.WALLET_ID%TYPE;
    BAL WALLET.BALANCE%TYPE;
    DOES_NOT_EXIST EXCEPTION;
    EX_FNAME_NULL EXCEPTION;
    EX_LNAME_NULL EXCEPTION;
    USER_EXISTS_EXCEP EXCEPTION;
    BAL_NULL EXCEPTION;
BEGIN
    IF LENGTH(LOWER(F_NAME)) IS NULL THEN
        RAISE EX_FNAME_NULL;
    END IF;
    
    IF LENGTH(LOWER(L_NAME)) IS NULL THEN
        RAISE EX_LNAME_NULL;
    END IF;

    IF NEW_BAL IS NULL  OR NEW_BAL<0 THEN
        RAISE BAL_NULL;
    END IF;

    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM (SELECT WALLET_ID FROM CUSTOMER WHERE FIRST_NAME='''||F_NAME||''' AND LAST_NAME='''||L_NAME||''')') INTO VAL;
    
    IF VAL=0 THEN
        RAISE DOES_NOT_EXIST;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT WALLET_ID FROM CUSTOMER WHERE FIRST_NAME='''||F_NAME||''' AND LAST_NAME='''||L_NAME||'''') INTO W_ID;
    EXECUTE IMMEDIATE ('SELECT BALANCE FROM WALLET WHERE WALLET_ID='||W_ID) INTO BAL;
    
    BAL:= BAL+NEW_BAL;
    EXECUTE IMMEDIATE ('UPDATE WALLET SET BALANCE=' ||BAL|| ' WHERE WALLET_ID = '||W_ID);
    
    DBMS_OUTPUT.PUT_LINE('BALANCE FOR '||F_NAME||' '||L_NAME||' IS '||BAL);
    COMMIT;
    
    EXCEPTION
    WHEN BAL_NULL THEN
        DBMS_OUTPUT.PUT_LINE('INPUT BALANCE VALUE IS NULL OR LESS THAN 0');        
    WHEN EX_FNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('FIRST NAME CANNOT BE EMPTY');    
    WHEN EX_LNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('LAST NAME CANNOT BE EMPTY');
    WHEN USER_EXISTS_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('USER ALREADY EXISTS, CANNOT BE REGISTERED AS NEW USER');
    WHEN DOES_NOT_EXIST THEN
        DBMS_OUTPUT.PUT_LINE('REGISTER CUSTOMER IN DATABSE');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS');    
    ROLLBACK;
END;
/    


CREATE OR REPLACE PROCEDURE CUSTOMER_REGISTRATION(F_NAME IN CUSTOMER.FIRST_NAME%TYPE,L_NAME IN CUSTOMER.LAST_NAME%TYPE, MOB_NO IN CUSTOMER.MOBILE_NUMBER%TYPE, EMAIL IN CUSTOMER.EMAIL_ID%TYPE) AS
    C_ID CUSTOMER.CUSTOMER_ID%TYPE;
    VAL CUSTOMER.CUSTOMER_ID%TYPE;
    VAL1 CUSTOMER.CUSTOMER_ID%TYPE;
    W_ID WALLET.WALLET_ID%TYPE;
    EX_FNAME_NULL EXCEPTION;
    EX_LNAME_NULL EXCEPTION;
    USER_EXISTS_EXCEP EXCEPTION;
    MOB_NO_FORMAT EXCEPTION;
    EMAIL_ISSUE EXCEPTION;
BEGIN
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER') INTO VAL;
    IF VAL=0 THEN
        C_ID:=1;
    ELSIF VAL>0 THEN
        SELECT CUSTOMER_ID INTO C_ID FROM CUSTOMER WHERE CUSTOMER_ID=(SELECT MAX(CUSTOMER_ID) FROM CUSTOMER);
        C_ID:=C_ID+1;
    END IF;
      
    IF LENGTH(UPPER(F_NAME)) IS NULL THEN
        RAISE EX_FNAME_NULL;
    END IF;
    
    IF LENGTH(UPPER(L_NAME)) IS NULL THEN
        RAISE EX_LNAME_NULL;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER WHERE UPPER(FIRST_NAME)=UPPER('''||F_NAME||''') AND UPPER(LAST_NAME)=UPPER('''||L_NAME||''')') INTO VAL1;
    
    IF VAL1>0 THEN
        RAISE USER_EXISTS_EXCEP;
    END IF;

    IF MOB_NO < 1000000000 OR MOB_NO>9999999999 THEN
        RAISE MOB_NO_FORMAT;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) from (SELECT 1 from dual where REGEXP_LIKE ('''||EMAIL||''', ''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$''))') INTO VAL1;
    
    IF LENGTH(UPPER(EMAIL)) IS NULL OR VAL1<1 THEN
        RAISE EMAIL_ISSUE;
    END IF;
    
    WALLET_REGISTRATION(W_ID);
    
    DBMS_OUTPUT.PUT_LINE('INSERT INTO WALLET VALUES ('||W_ID||',0)');
    DBMS_OUTPUT.PUT_LINE('INSERT INTO CUSTOMER VALUES ('||C_ID||','''||F_NAME||''','''||L_NAME||''','||MOB_NO||','''||EMAIL||''',0,'||W_ID||')');
    EXECUTE IMMEDIATE('INSERT INTO WALLET VALUES ('||W_ID||',0)');
    EXECUTE IMMEDIATE('INSERT INTO CUSTOMER VALUES ('||C_ID||','''||F_NAME||''','''||L_NAME||''','||MOB_NO||','''||EMAIL||''',0,'||W_ID||')');
    --INSERT INTO CUSTOMER VALUES (C_ID,F_NAME,L_NAME,MOB_NO,EMAIL,0,W_ID);
    
    COMMIT;
    
    EXCEPTION
    WHEN EX_FNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('FIRST NAME CANNOT BE EMPTY');
    WHEN EX_LNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('LAST NAME CANNOT BE EMPTY');
    WHEN USER_EXISTS_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('USER ALREADY EXISTS, CANNOT BE REGISTERED AS NEW USER');
    WHEN MOB_NO_FORMAT THEN
        DBMS_OUTPUT.PUT_LINE('MOBILE NUMBER CANNOT BE NEGATIVE OR GREATER THAN 10 DIGITS');
    WHEN EMAIL_ISSUE THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER EMAIL IN VALID FORMAT');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS');
    ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE(
F_NAME IN EMPLOYEE.FIRST_NAME%TYPE,
L_NAME IN EMPLOYEE.LAST_NAME%TYPE, 
MOB_NO IN NUMBER, 
EMAIL IN EMPLOYEE.EMAIL_ID%TYPE, 
DOB IN EMPLOYEE.DOB%TYPE, 
GENDER IN EMPLOYEE.GENDER%TYPE,  
DESIGNATION IN EMPLOYEE.DESIGNATION%TYPE,
REPORTING_MANAGER IN NUMBER DEFAULT NULL) 
AS
    E_ID NUMBER;
    EX_FNAME_NULL EXCEPTION;
    EX_LNAME_NULL EXCEPTION;
    USER_EXISTS_EXCEP EXCEPTION;
    VAL EMPLOYEE.EMPLOYEE_ID%TYPE;
    EMAIL_ISSUE EXCEPTION;
    MOB_NO_FORMAT EXCEPTION;
    DOB_FUTURE EXCEPTION;
    EX_DESN_NULL EXCEPTION;
    EX_MANAGER_NULL EXCEPTION;
    TODAYS_DATE DATE := SYSDATE;
    VAL1 NUMBER;
    VAL2 NUMBER;
   
BEGIN
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM EMPLOYEE') INTO VAL;
    IF VAL=0 THEN
        E_ID:=1;
    ELSIF VAL>0 THEN
        SELECT EMPLOYEE_ID INTO E_ID FROM EMPLOYEE WHERE EMPLOYEE_ID=(SELECT MAX(EMPLOYEE_ID) FROM EMPLOYEE);
        E_ID:=E_ID+1;
    END IF;
      
    IF LENGTH(UPPER(F_NAME)) IS NULL THEN
        RAISE EX_FNAME_NULL;
    END IF;
    
    IF LENGTH(UPPER(L_NAME)) IS NULL THEN
        RAISE EX_LNAME_NULL;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) FROM CUSTOMER WHERE UPPER(FIRST_NAME)=UPPER('''||F_NAME||''') AND UPPER(LAST_NAME)=UPPER('''||L_NAME||''')') INTO VAL1;
    
    IF VAL1>0 THEN
        RAISE USER_EXISTS_EXCEP;
    END IF;
 
    IF MOB_NO < 1000000000 OR MOB_NO>9999999999 THEN
        RAISE MOB_NO_FORMAT;
    END IF;
    
    EXECUTE IMMEDIATE ('SELECT COUNT(*) from (SELECT 1 from dual where REGEXP_LIKE ('''||EMAIL||''', ''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$''))') INTO VAL1;
    
    IF LENGTH(UPPER(EMAIL)) IS NULL OR VAL1<1 THEN
        RAISE EMAIL_ISSUE;
    END IF;
    
    
    IF LENGTH(UPPER(DESIGNATION)) IS NULL THEN
        RAISE EX_DESN_NULL;
    END IF;
    --EXECUTE IMMEDIATE ('SELECT trunc('''||TODAYS_DATE||''') - to_date('''||DOB||''', ''dd-mm-yyyy'') FROM DUAL') INTO VAL2;
    
    --EXECUTE IMMEDIATE ('SELECT SYSDATE - '''||DOB||''', ''dd-mm-yyyy'') FROM DUAL') INTO VAL2;
    --DBMS_OUTPUT.PUT_LINE(VAL2);
    --IF TO_NUMBER(TO_CHAR(VAL2)) >= 0 THEN
    --   RAISE DOB_FUTURE;
    --END IF;
    

    DBMS_OUTPUT.PUT_LINE(E_ID);
    DBMS_OUTPUT.PUT_LINE(F_NAME);
    DBMS_OUTPUT.PUT_LINE(L_NAME);
    DBMS_OUTPUT.PUT_LINE(EMAIL);
    DBMS_OUTPUT.PUT_LINE(MOB_NO);
    DBMS_OUTPUT.PUT_LINE(DOB);
    DBMS_OUTPUT.PUT_LINE(GENDER);
    DBMS_OUTPUT.PUT_LINE(DESIGNATION);
    DBMS_OUTPUT.PUT_LINE(REPORTING_MANAGER);
    
    DBMS_OUTPUT.PUT_LINE('INSERT INTO EMPLOYEE VALUES ('||E_ID||','''||F_NAME||''','''||L_NAME||''','||MOB_NO||','''||EMAIL||''','''||DOB||''','''||GENDER||''','''||DESIGNATION||''',' || REPORTING_MANAGER ||')');
    INSERT INTO EMPLOYEE VALUES (E_ID,F_NAME,L_NAME,EMAIL,MOB_NO,DOB,GENDER,DESIGNATION,REPORTING_MANAGER);
    COMMIT;
    
    EXCEPTION
    WHEN EX_FNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('FIRST NAME CANNOT BE EMPTY');
    WHEN EX_LNAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('LAST NAME CANNOT BE EMPTY');
    WHEN USER_EXISTS_EXCEP THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ALREADY EXISTS, CANNOT BE REGISTERED AS NEW EMPLOYEE');
    WHEN MOB_NO_FORMAT THEN
        DBMS_OUTPUT.PUT_LINE('MOBILE NUMBER CANNOT BE NEGATIVE OR GREATER THAN 10 DIGITS');
    WHEN EMAIL_ISSUE THEN
        DBMS_OUTPUT.PUT_LINE('PLEASE ENTER EMAIL IN VALID FORMAT');
    WHEN DOB_FUTURE THEN
         DBMS_OUTPUT.PUT_LINE('PLEASE ENTER DATE OF BIRTH NO FUTURE VALUES ALLOWED' );
    WHEN EX_DESN_NULL THEN
        DBMS_OUTPUT.PUT_LINE('DESIGNATION CANNOT BE EMPTY');
    WHEN EX_MANAGER_NULL THEN
        DBMS_OUTPUT.PUT_LINE('REPORTING MANAGER CANNOT BE EMPTY');    
    --WHEN OTHERS THEN
    --    DBMS_OUTPUT.PUT_LINE('ENTER VALID INPUTS ');
    ROLLBACK;
END;
/

SET SERVEROUTPUT ON;
EXECUTE ADD_EMPLOYEE('LILLIAN','WALKER',1910872484,'LILLIAN.WALKER@BBIKES.COM', '27-NOV-1997','FEMALE','MANAGER');


EXECUTE CUSTOMER_REGISTRATION ('John','Smith',6098976544,'dighe.ni@northeastern.edu');
INSERT INTO CUSTOMER VALUES (1,'John','Smith',6098976544,'dighe.ni@northeastern.edu',0,2);

INSERT INTO WALLET VALUES (1,0);
INSERT INTO CUSTOMER VALUES (1,'John','Smith',6098976544,'dighe.ni@northeastern.edu',0,1);

