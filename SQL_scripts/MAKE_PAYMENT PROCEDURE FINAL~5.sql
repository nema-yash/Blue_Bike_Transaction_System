create or replace PROCEDURE MAKE_PAYMENT(EMAIL IN CUSTOMER.EMAIL_ID%TYPE) AS
    CUST_ID CUSTOMER.CUSTOMER_ID%TYPE;
    MEM_ID MEMBERSHIP.MEMBERSHIP_ID%TYPE;
    R_ID RENT.RENT_ID%TYPE;
    DISCOUNT_AMT DISCOUNT.COUPON_VALUE%TYPE;
    CHECK_WRONG_DATA BOOLEAN := TRUE;
    END_TIME DATE;
    START_TIME DATE;
    TOTAL_TIME NUMBER;
    BAL WALLET.BALANCE%TYPE;
    WAL_ID CUSTOMER.WALLET_ID%TYPE;
    GRAND_TOTAL NUMBER;
    EMAIL_NULL EXCEPTION;
BEGIN
    IF EMAIL IS NULL THEN
        RAISE EMAIL_NULL;
    END IF;
    
    BEGIN
        SELECT CUSTOMER_ID INTO CUST_ID FROM CUSTOMER WHERE EMAIL_ID = UPPER(EMAIL);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ENTERED EMAIL IS WRONG');
            CHECK_WRONG_DATA := FALSE;
        ROLLBACK;
    END;
    
    IF CHECK_WRONG_DATA THEN
        BEGIN
            SELECT RENT_ID INTO R_ID FROM RENT WHERE CUSTOMER_ID = CUST_ID AND PAYMENT_STATUS = 'UNPAID';
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('NO PENDING PAYMENTS');
                CHECK_WRONG_DATA := FALSE;
            ROLLBACK;
        END;
    END IF;
    
    IF CHECK_WRONG_DATA THEN
        BEGIN
            SELECT MEMBERSHIP_ID INTO MEM_ID FROM CUSTOMER WHERE CUSTOMER_ID = CUST_ID AND MEMBERSHIP_END_DATE > CURRENT_DATE;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                MEM_ID := 0;
                CHECK_WRONG_DATA := FALSE;
            ROLLBACK;
        END;
    END IF;
    IF CHECK_WRONG_DATA THEN
        SELECT COUPON_VALUE INTO DISCOUNT_AMT 
        FROM DISCOUNT D
        LEFT JOIN RENT R ON D.COUPON_ID = R.COUPON_ID
        WHERE CUSTOMER_ID = CUST_ID AND PAYMENT_STATUS = 'UNPAID';
        SELECT PICKUP_TIME INTO START_TIME FROM RENT WHERE RENT_ID = R_ID;
        SELECT DROP_TIME INTO END_TIME FROM RENT WHERE RENT_ID = R_ID;
        SELECT (END_TIME - START_TIME)* 24 * 60 difference_in_minutes INTO TOTAL_TIME FROM DUAL;
        
        IF MEM_ID = 1 THEN
            GRAND_TOTAL := (TOTAL_TIME * 10)/60 - (10/6000)*(TOTAL_TIME * 10);
        ELSIF MEM_ID = 2 THEN
            GRAND_TOTAL := (TOTAL_TIME * 10)/60 - (20/6000)*(TOTAL_TIME * 10);
        ELSIF MEM_ID = 3 THEN
            GRAND_TOTAL := (TOTAL_TIME * 10)/60 - (30/6000)*(TOTAL_TIME * 10);
        ELSE
            GRAND_TOTAL := (TOTAL_TIME * 10)/60;
        END IF;
        
        
        GRAND_TOTAL := GRAND_TOTAL - (DISCOUNT_AMT/100)*GRAND_TOTAL;
        
        SELECT WALLET_ID INTO WAL_ID FROM CUSTOMER WHERE CUSTOMER_ID = CUST_ID;
        BAL := WALLET_BALANCE(WAL_ID);
        
        IF BAL > GRAND_TOTAL THEN
            UPDATE WALLET SET BALANCE = BALANCE - GRAND_TOTAL WHERE WALLET_ID = WAL_ID;
            UPDATE RENT SET PAYMENT_STATUS = 'PAID' WHERE RENT_ID = R_ID;
            DBMS_OUTPUT.PUT_LINE('THANK YOU FOR THE PAYMENT');
        ELSE
            DBMS_OUTPUT.PUT_LINE('INSUFFICIENT BALANCE IN YOUR WALLET. REFILL YOUR WALLET');
            DBMS_OUTPUT.PUT_LINE('TO ADD BALANCE EXECUTE ADD_BALANCE(''EMAIL_ID'',  NEW_BAL )');
        END IF;
    
        COMMIT;
    END IF;
EXCEPTION
    WHEN EMAIL_NULL THEN
        DBMS_OUTPUT.PUT_LINE('EMAIL ID CANNOT BE NULL');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    ROLLBACK;
END;
/